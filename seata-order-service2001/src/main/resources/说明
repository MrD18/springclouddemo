1.seata 2001  2002 2003 是测试分布式事务
order 2001: 订单
storage 2002: 库存
account 2003: 账户
-----创建订单->调用库存服务扣减库存->调用账户服务扣减账户余额->修改订单状态
那么就是2001中通过Feing调用了---库存---账户

此事务是加在
 ---------------------------------------------------------------------------
 @Override
    @GlobalTransactional(name = "fsp-create-order",rollbackFor = Exception.class)
    public void create(Order order) {

        log.info("--->开始订单");
        //新建订单
        orderDao.create(order);

        //扣减库存
        log.info("----->订单微服务开始调用库存，做扣减Count");
        storageService.decrease(order.getProductId(),order.getCount());
        log.info("----->订单微服务开始调用库存，做扣减end");

        //扣减账户
        log.info("----->订单微服务开始调用账户，做扣减Money");
        accountService.decrease(order.getUserId(),order.getMoney());
        log.info("----->订单微服务开始调用账户，做扣减end");


        //修改订单状态，从零到1代表已经完成
        log.info("----->修改订单状态开始");
        orderDao.update(order.getUserId(),0);
        log.info("----->修改订单状态结束");
----------------------------------------------------------------------------

2.seata: 开源的分布式事务解决,致力于在微服务架构下提供高性能和简易的分布式事务
由一个全局ID和三个组件组成:
    Transaction ID XID--全局唯一的事务ID
    TC-事务协调者(事务管理中心,老师)   维护全局事务的运行状态,负责协调并驱动全局事务的提交和回滚
    TM-事务管理器(事务发起者,班主任)   控制全局事务的边界,负责开启一个全局事务,并最终发起全局提交或全局回滚的决议
    RM-资源管理器(单个微服务,数据库)   控制分支事务,负责分支注册,状态汇报,并接受事务协调的指令,驱动分支(本地)事务的提交和回滚

3.https://blog.csdn.net/tianyaleixiaowu/article/details/95208906
4.对于seata采用1.0 修改里面的配置 file.conf   registry.conf  主要是将其注册进nacos中
  也就是说 启动的时候先启动nacos然后启动seata;
  每个项目中都有这两个配置文件,应该是每个服务进行初始化配置, 可以看下每个服务的yml文件
5.测试:
   目前这3个服务是可以跑通的:http://localhost:2001/order/create?userId=1&productId=1&count=10&money=100

   但是如果account 2003: 账户 这块出现异常 可以发现数据库中订单已经启动, 库存也扣了, 但是账户中的钱没有扣,按理应该删掉

   测试事务加上: 是起作用的, 订单没有启动, 库存不减, 钱不扣



